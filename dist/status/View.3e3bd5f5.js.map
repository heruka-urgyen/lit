{"version":3,"sources":["../../components/Selectable.js","utils.js","View.js"],"names":["calculateListView","items","viewSize","selectedItem","length","selected","nextWindow","slice","Selectable","data","maxHeight","map","x","i","propTypes","PropTypes","arrayOf","string","isRequired","number","runCommand","cmd","f","update","file","split","replace","params","on","commit","process","stdin","pause","exit","commitFixup","hash","match","commitAmend","updateLog","selectDown","selectUp","getInputConfig","props","input","key","mode","selectItem","setMode","lines","setLines","log","setLog","downArrow","upArrow","return","Status","initialLines","_","rows"],"mappings":"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","file":"View.3e3bd5f5.js","sourceRoot":"../../src/commands/status","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {Box, Text} from \"ink\"\nimport Selector from \"./Selector\"\n\nconst calculateListView = (items, viewSize, selectedItem) => {\n  if (items.length <= viewSize) {\n    return {items, selected: selectedItem}\n  }\n\n  const nextWindow = (viewSize / 2) - ((viewSize / 2) % 1)\n\n  if (selectedItem + nextWindow >= items.length) {\n    return {items: items.slice(-viewSize), selected: viewSize - items.length + selectedItem}\n  }\n\n  if (selectedItem - nextWindow < 0) {\n    return {items: items.slice(0, viewSize), selected: selectedItem}\n  }\n\n  return {\n    items: items.slice(selectedItem - nextWindow, selectedItem + nextWindow),\n    selected: nextWindow,\n  }\n}\n\nexport default function Selectable({data, selected, maxHeight}) {\n  const {items, selected: selectedItem} = calculateListView(data, maxHeight, selected)\n\n  return (\n    <Box maxHeight={maxHeight} flexDirection=\"column\">\n      {items.map((x, i) => (\n        <Text key={x} wrap=\"truncate\">\n          <Selector isSelected={selectedItem === i} el={x} />\n        </Text>\n      ))}\n    </Box>\n  )\n}\n\nSelectable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selected: PropTypes.number.isRequired,\n  maxHeight: PropTypes.number.isRequired,\n}\n","import stripAnsi from \"strip-ansi\"\nimport {statusStrToList} from \"utils\"\nimport {\n  runCmd,\n  gitStatus,\n  gitDiff,\n  gitCommit,\n  gitCommitAmend,\n  gitCommitFixup,\n  gitLog,\n} from \"git-utils\"\n\nexport const runCommand = (cmd, f, update) => {\n  const file = f.split(\" \").slice(-1)[0].replace(\"\\r\", \"\")\n  runCmd({params: [cmd, file]}).on(\"close\", () => {\n    gitStatus().on(\"data\", data => {\n      update(statusStrToList(data))\n    })\n  })\n}\n\nexport const commit = async exit => {\n  const output = await gitDiff()\n\n  if (output.length > 0) {\n    process.stdin.pause()\n    await gitCommit()\n    exit()\n  }\n}\n\nexport const commitFixup = async (commit, exit) => {\n  const hash = stripAnsi(commit).match(/[^\\s]+/)[0]\n\n  process.stdin.pause()\n  await gitCommitFixup(hash)\n  exit()\n}\n\nexport const commitAmend = async exit => {\n  const output = await gitDiff()\n\n  if (output.length > 0) {\n    process.stdin.pause()\n    await gitCommitAmend()\n    exit()\n  }\n}\n\nexport const updateLog = async update => {\n  const output = await gitLog()\n  update(output.split(\"\\n\").slice(0, -1))\n}\n","import React, {useState} from \"react\"\nimport {Box, useApp, useInput} from \"ink\"\nimport useStdoutDimensions from \"ink-use-stdout-dimensions\"\n\nimport Selectable from \"components/Selectable\"\nimport {gitDiff} from \"git-utils\"\nimport {runCommand, commit, commitAmend, commitFixup, updateLog} from \"./utils\"\n\nconst selectDown = items => i => (i + 1) % items.length\nconst selectUp = items => i => i > 0 ? i - 1 : items.length - 1\n\nconst getInputConfig = props => async (input, key) => {\n  const {\n    exit,\n    mode,\n    selectItem,\n    setMode,\n    lines,\n    setLines,\n    selected,\n    log,\n    setLog,\n  } = props\n\n  if (input === \"q\") {\n    exit()\n  }\n\n  if (mode === \"add\") {\n    if (input === \"j\" || key.downArrow) {\n      selectItem(selectDown(lines))\n    }\n\n    if (input === \"k\" || key.upArrow) {\n      selectItem(selectUp(lines))\n    }\n\n    if (input === \"s\") {\n      runCommand(\"add\", lines[selected], setLines)\n    }\n\n    if (input === \"r\") {\n      runCommand(\"reset\", lines[selected], setLines)\n    }\n\n    if (input === \"o\") {\n      runCommand(\"checkout\", lines[selected], setLines)\n\n      if (lines.length === 1) {\n        exit()\n      } else {\n        selectItem(selectDown(lines))\n      }\n    }\n\n    if (input === \"c\") {\n      commit(exit)\n    }\n\n    if (input === \"a\") {\n      commitAmend(exit)\n    }\n\n    if (input === \"f\") {\n      const output = await gitDiff()\n\n      if (output.length > 0) {\n        updateLog(setLog)\n        setMode(\"log\")\n        selectItem(0)\n      }\n    }\n  }\n\n  if (mode === \"log\") {\n    if (key.return) {\n      commitFixup(log[selected], exit)\n    }\n\n    if (input === \"j\" || key.downArrow) {\n      selectItem(selectDown(log))\n    }\n\n    if (input === \"k\" || key.upArrow) {\n      selectItem(selectUp(log))\n    }\n  }\n}\n\nexport default function Status({initialLines}) {\n  const {exit} = useApp()\n  const [mode, setMode] = useState(\"add\")\n  const [selected, selectItem] = useState(0)\n  const [log, setLog] = useState([])\n  const [lines, setLines] = useState(initialLines)\n  const [_, rows] = useStdoutDimensions()\n\n  useInput(getInputConfig({\n    exit,\n    mode,\n    selectItem,\n    setMode,\n    lines,\n    setLines,\n    selected,\n    log,\n    setLog,\n  }))\n\n  if (mode === \"log\") {\n    const maxHeight = rows ? rows - 5 : log.length\n    return <Selectable maxHeight={maxHeight} data={log} selected={selected} />\n  }\n\n  if (mode === \"add\") {\n    const maxHeight = rows ? rows - 5 : lines.length\n    return (\n      <Box>\n        <Selectable maxHeight={maxHeight} data={lines} selected={selected} />\n        <Box height={1} />\n      </Box>\n    )\n  }\n}\n"]}